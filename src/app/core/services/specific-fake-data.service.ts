import { Injectable } from '@angular/core';
import { 
  randAbbreviation, 
  randAccessory, 
  randAccount, 
  randAddress, 
  randAirport, 
  randAirportCode, 
  randAirportName, 
  randAlpha, 
  randAlphaNumeric, 
  randAmericanFootballTeam, 
  randAnimalType, 
  randAwsRegion, 
  randAwsRequestId, 
  randAwsService,
  randBaseballTeam, 
  randBear, 
  randBinary, 
  randBird, 
  randBitcoinAddress, 
  randBook, 
  randBrand, 
  randBrowser, 
  randCardinalDirection, 
  randCat, 
  randCity, 
  randClothingSize, 
  randColor, 
  randCompanyName, 
  randCountry, 
  randCountryCode, 
  randCreditCard, 
  randCreditCardBrand, 
  randCreditCardCVV, 
  randCreditCardNumber, 
  randCurrencyCode, 
  randCurrencyName, 
  randCurrencySymbol, 
  randDepartment, 
  randDog, 
  randDomainName, 
  randDomainSuffix, 
  randDrinks, 
  randEmail, 
  randEmailProvider, 
  randEmoji, 
  randFileExt, 
  randFileName, 
  randFilePath, 
  randFileType, 
  randFirstName, 
  randPhrase, 
  randFullName, 
  randGender, 
  randHex, 
  randHexaDecimal, 
  randHsl, 
  randIp, 
  randIpv6, 
  randJobArea, 
  randJobDescriptor, 
  randJobType, 
  randLanguage, 
  randLastName, 
  randLatitude, 
  randLongitude, 
  randMac, 
  randMonth, 
  randMovie, 
  randMusicGenre, 
  randPassword, 
  randPhoneNumber, 
  randPort, 
  randAmount, 
  randProductCategory, 
  randProductDescription, 
  randProductName, 
  randProduct, 
  randProgrammingLanguage, 
  randRecentDate, 
  randRgb, 
  seed, 
  randSinger, 
  randSkill, 
  randSlug, 
  randSong, 
  randSportsTeam, 
  randSports, 
  randState, 
  randStatus, 
  randStreetAddress, 
  randStreetName, 
  randTimeZone, 
  randUrl, 
  randUserName, 
  randUuid, 
  randVehicle, 
  randVehicleModel, 
  randVehicleType, 
  randWeekday, 
  randZipCode 
} from '@ngneat/falso';
import { types } from '../constant/types';

@Injectable({
  providedIn: 'root'
})
export class SpecificFakeDataService {

  getData(type: string) {
    if (type.includes('.')) {
      const typeName = type.split('.')[1];

      if (types.includes(typeName)) {
        return this._getSpecificData(typeName);
      } else {
        throw new Error('Sintax Error');
      }
    } else {
      throw new Error('Sintax Error');
    }
  }

  private _getSpecificData(type: string) {
    const hashData: any = {
      ABBREVIATION: randAbbreviation,
      ACCESORY: randAccessory,
      ACCOUNT: randAccount,
      ADDRESS: randAddress,
      AGE: () => (Math.floor(Math.random() * 100) + 1),
      AIRPORT_CODE: randAirportCode,
      AIRPORT_NAME: randAirportName,
      AIRPORT: randAirport,
      ALPHA_NUMERIC: randAlphaNumeric,
      ALPHA: randAlpha,
      AMERICAN_FOOTBALL_TEAM: randAmericanFootballTeam,
      ANIMAL_TYPE: randAnimalType,
      AWS_REGION: randAwsRegion,
      AWS_REQUEST_ID: randAwsRequestId,
      AWS_SERVICE: randAwsService,
      BASEBALL_TEAM: randBaseballTeam,
      BEAR: randBear,
      BINARY: randBinary,
      BIRD: randBird,
      BITCOIN_ADDRESS: randBitcoinAddress,
      BOOK: randBook,
      BRAND: randBrand,
      BROWSER: randBrowser,
      CARD_BRAND: randCreditCardBrand,
      CARD_CVV: randCreditCardCVV,
      CARD_NUMBER: randCreditCardNumber,
      CARDINAL_DIRECTION: randCardinalDirection,
      CAT: randCat,
      CITY: randCity,
      CLOTHING_SIZE: randClothingSize,
      COLOR: randColor,
      COMPANY_NAME: randCompanyName,
      COUNTRY_CODE: randCountryCode,
      COUNTRY: randCountry,
      CREDIT_CARD: randCreditCard,
      CURRENCY_CODE: randCurrencyCode,
      CURRENCY_NAME: randCurrencyName,
      CURRENCY_SYMBOL: randCurrencySymbol,
      DEPARTMENT: randDepartment,
      DESCRIPTION: randPhrase,
      DOG: randDog,
      DOMAIN_NAME: randDomainName,
      DOMAIN_SUFFIX: randDomainSuffix,
      DRINKS: randDrinks,
      EMAIL_PROVIDER: randEmailProvider,
      EMAIL: randEmail,
      EMOJI: randEmoji,
      FILE_EXT: randFileExt,
      FILE_NAME: randFileName,
      FILE_PATH: randFilePath,
      FILE_TYPE: randFileType,
      FIRST_NAME: randFirstName,
      FULL_NAME: randFullName,
      GENDER: randGender,
      HEX: randHex,
      HEXADECIMAL: randHexaDecimal,
      HSL: randHsl,
      IP: randIp,
      IPV6: randIpv6,
      JOB_AREA: randJobArea,
      JOB_DESCRIPTION: randJobDescriptor,
      JOB_TYPE: randJobType,
      LANGUAGE: randLanguage,
      LAST_NAME: randLastName,
      LATITUDE: randLatitude,
      LONGITUDE: randLongitude,
      MAC: randMac,
      MONTH: randMonth,
      MOVIE: randMovie,
      MUSIC_GENRE: randMusicGenre,
      PASSWORD: randPassword,
      PHONE_NUMBER: randPhoneNumber,
      PORT: randPort,
      PRICE: randAmount,
      PRODUCT_CATEGORY: randProductCategory,
      PRODUCT_DESCRIPTION: randProductDescription,
      PRODUCT_NAME: randProductName,
      PRODUCT: randProduct,
      PROGRAMMING_LANGUAGE: randProgrammingLanguage,
      RECENT_DATE: randRecentDate,
      RGB: randRgb,
      SEED: seed,
      SINGER: randSinger,
      SKILL: randSkill,
      SLUG: randSlug,
      SONG: randSong,
      SPORTS_TEAM: randSportsTeam,
      SPORTS: randSports,
      STATE: randState,
      STATUS: randStatus,
      STREET_ADDRESS: randStreetAddress,
      STREET_NAME: randStreetName,
      TIMEZONE: randTimeZone,
      URL: randUrl,
      USER_NAME: randUserName,
      UUID: randUuid,
      VEHICLE_MODEL: randVehicleModel,
      VEHICLE_TYPE: randVehicleType,
      VEHICLE: randVehicle,
      WEEKDAY: randWeekday,
      ZIP_CODE: randZipCode,
    };

    return hashData[type]();
  }
}
